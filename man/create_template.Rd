% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_template.R
\name{create_template}
\alias{create_template}
\title{Create Package Configuration Template}
\usage{
create_template(
  package = get_package_name(verbose = FALSE),
  fn_tmpl = NULL,
  case_format = "snake_case",
  overwrite = NULL,
  verbose = TRUE,
  interactive = TRUE
)
}
\arguments{
\item{package}{Character string with the package name. Defaults to \code{get_package_name()}
to detect the calling package.}

\item{fn_tmpl}{Character string with custom filename for the template.
If NULL, uses the default naming pattern based on case_format.}

\item{case_format}{Character string indicating the case format to use for filenames.
Options are: "snake_case" (default), "camelCase", "PascalCase", "kebab-case".}

\item{overwrite}{Logical indicating whether to overwrite existing template file.
If NULL (default), prompts user when file exists.}

\item{verbose}{Logical. If TRUE (default), displays progress and confirmation messages.}

\item{interactive}{Logical. If TRUE (default), enters interactive mode for
variable configuration. If FALSE, creates an empty template structure.}
}
\value{
Character string with the full path to the created template file (invisible).
}
\description{
Creates a new YAML configuration template file for a package through a
streamlined, interactive process. This function acts as a coordinator,
setting up the template structure and delegating content creation to
\code{update_template()} in interactive mode.
}
\details{
This function has been refactored to follow a coordinator pattern:
\itemize{
\item Sets up the template file path and handles overwrite logic
\item Creates the basic template structure with headers
\item Delegates variable configuration to \code{update_template(interactive = TRUE)}
\item Provides helpful next steps for package developers
}

The interactive mode guides you through adding variables with descriptions,
types, default values, and other metadata. The template follows icy's standard
structure for configuration management.
}
\examples{
\dontrun{
# Interactive template creation
create_template()

# Create template for specific package
create_template(package = "mypackage")

# Create with custom filename
create_template(fn_tmpl = "custom_config_template.yml")

# Create empty template without interaction
create_template(interactive = FALSE)
}

}
\seealso{
\code{\link{update_template}} for modifying existing templates
\code{\link{setup}} for interactive configuration of packages
}
