% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_file.R
\name{find_file}
\alias{find_file}
\title{Unified File Finding Function}
\usage{
find_file(
  package = get_package_name(),
  fn_tmpl = NULL,
  fn_local = NULL,
  pairing = TRUE,
  confirm_fuzzy = FALSE,
  case_format = "snake_case",
  exact = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{package}{Character string with package name. Defaults to \code{get_package_name()}.}

\item{fn_tmpl}{Character string with template filename to search for. Can be a partial
name for fuzzy matching.}

\item{fn_local}{Character string with local filename to search for. Can be a partial
name for fuzzy matching.}

\item{pairing}{Logical. If TRUE (default), automatically finds the corresponding paired
file when only one filename is provided. Must be TRUE if both filenames are provided.}

\item{confirm_fuzzy}{Logical. If TRUE, asks user to confirm fuzzy matches interactively.
Defaults to FALSE for non-interactive use.}

\item{case_format}{Character string for default filename generation when no filenames
are provided. Options: "snake_case" (default), "camelCase", "PascalCase", "kebab-case".}

\item{exact}{Logical. If TRUE, only allows exact basename matches (no fuzzy matching).
Defaults to FALSE for normal fuzzy searching behavior.}

\item{verbose}{Logical. If TRUE, shows detailed messages during the search process.}
}
\value{
List with components:
\describe{
\item{fn_tmpl}{Character string with path to template file, or NULL if not found}
\item{fn_local}{Character string with path to local file, or NULL if not found}
\item{source}{Character string indicating search result: "exact_match", "fuzzy_match",
"not_found", or "pair_found"}
}
}
\description{
Core function for finding configuration files with optional fuzzy match confirmation
and automatic pairing. Provides a consistent interface for all file finding operations
in the icy package.
}
\details{
The function operates in several modes based on the provided arguments:
\itemize{
\item If both \code{fn_tmpl} and \code{fn_local} are provided, searches for both files
\item If only \code{fn_tmpl} is provided: finds template, optionally pairs with local
\item If only \code{fn_local} is provided: finds local, optionally pairs with template
\item If neither is provided: uses default patterns to find both files
}

When \code{pairing = TRUE} and only one file is specified, the function automatically
generates the corresponding filename using the pairing rules (e.g., "template" â†” "local").

The \code{source} field in the return value indicates how the primary file was found:
\itemize{
\item "exact_match": File found with exact name match
\item "fuzzy_match": File found using fuzzy matching
\item "not_found": No matching file found
\item "pair_found": Both files found (when searching for defaults)
}
}
\examples{
\dontrun{
# Find template and automatically find its paired local
find_file("mypackage", fn_tmpl = "config_template")

# Find local file only (no pairing)
find_file("mypackage", fn_local = "config_local", pairing = FALSE)

# Find both with explicit names
find_file("mypackage", fn_tmpl = "my_template", fn_local = "my_local")

# Find defaults for package
find_file("mypackage")

# Interactive fuzzy matching
find_file("mypackage", fn_local = "conf", confirm_fuzzy = TRUE)
}

}
\seealso{
\code{\link{find_local}}, \code{\link{find_template}}
}
