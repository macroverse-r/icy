% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dot-write_config_yaml.R
\name{.write_config_yaml}
\alias{.write_config_yaml}
\title{Write Configuration to YAML File}
\usage{
.write_config_yaml(
  var_list,
  file_path,
  package = get_package_name(verbose = FALSE),
  section = "default",
  template_file = NULL,
  create_if_missing = TRUE,
  custom_header = NULL,
  append_sections = TRUE,
  strict_template = FALSE,
  verbose = FALSE
)
}
\arguments{
\item{var_list}{Named list of variables to write. Names should be the
variable names and values should be the values to set.}

\item{file_path}{Character string with the target file path (absolute or relative).
For local configs, use find_local() to get this path.}

\item{package}{Character string with the package name. Defaults to \code{get_package_name()}
to detect the calling package. Used for validation against templates.}

\item{section}{Character string for the section in the YAML file (default: "default").
Use NULL or "" to write variables at root level without section wrapping.
When NULL/"", var_list should contain the complete YAML structure.}

\item{template_file}{Character string with path to template file for validation.
If NULL and package is provided, will look for the package's template.}

\item{create_if_missing}{Logical; if TRUE (default), creates parent directories
if they don't exist. The file itself is always created/updated.}

\item{custom_header}{Character vector of header lines to add to the file.
Each element becomes a line. If NULL, no header.}

\item{append_sections}{Logical; if FALSE (default for templates), replaces the
entire section. If TRUE (default for configs), merges with existing variables.}

\item{strict_template}{Logical; if TRUE, removes any variables not defined in the
template (used for local configs). If FALSE (default), keeps all variables.}

\item{verbose}{Logical. If TRUE, displays informative messages. Defaults to FALSE.}
}
\value{
Invisibly returns the file path on success.
}
\description{
Package-aware YAML configuration writer for the icy ecosystem that can write
to both local configuration files and template files with support for custom
headers, NULL handling, and validation.
}
\details{
This function is the core YAML writer for the icy ecosystem, designed to handle:
\itemize{
\item Local configuration files (via write_local)
\item Template files (via create_template/update_template)
\item Any package-related YAML configuration
}

It integrates with icy's validation system and properly handles NULL values
by preserving them as \code{~} in the YAML output.
}
\keyword{internal}
