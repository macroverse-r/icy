% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load_config.R
\name{load_config}
\alias{load_config}
\title{Load Configuration into Environment Variables}
\usage{
load_config(
  package = get_package_name(),
  user = "default",
  unset = list(),
  ensure_local = TRUE,
  origin = "priority",
  yaml_file = NULL,
  case_format = "snake_case"
)
}
\arguments{
\item{package}{Character string with the package name. If NULL (default),
uses the current package name.}

\item{user}{Character string for the user/section in the YAML file (default: "default").}

\item{unset}{Named list of default values to use for variables that are not set
in any configuration source. Names should match template variable names.}

\item{ensure_local}{Logical. If TRUE (default), creates a local configuration file
if it doesn't exist. Only applies when origin includes local config.}

\item{origin}{Character string specifying where to read the primary configuration from:
\itemize{
\item "template": Read from the package's template YAML file (read-only blueprint)
\item "local": Read from the user's local configuration file
\item "renviron": Read from .Renviron file
\item "priority": Read with priority order (.Renviron > local config, default)
}}

\item{yaml_file}{Character string with the name or path to the YAML file. If NULL,
the function will search for the appropriate file based on the origin.}

\item{case_format}{Character string indicating the case format to use for
searching the YAML file if \code{yaml_file} is NULL. Options are:
"snake_case" (default), "camelCase", "PascalCase", "kebab-case".}
}
\value{
Invisibly returns a named list of the environment variables that were set.
}
\description{
The function follows this priority order for setting environment variables:
\enumerate{
\item Values from the specified origin (default: "priority" which means .Renviron > local config)
\item Template values for variables not found in the origin
\item Unset defaults for variables not found in either origin or template
}

This ensures that all variables defined in the template are loaded into the environment,
with appropriate fallbacks when values are missing from higher-priority sources.
}
\details{
Loads configuration from various sources into the current R session using \code{Sys.setenv()}.
This function combines configuration from multiple sources with fallback defaults to ensure
all required environment variables are set.
}
\examples{
\dontrun{
# Load configuration with defaults for missing variables
load_config(
  package = "dummy",
  unset = list(DUMMY_VERBOSE = TRUE, DUMMY_DEBUG = FALSE)
)

# Load from local config only with fallbacks
load_config(
  package = "mypackage",
  origin = "local",
  unset = list(MYPACKAGE_TIMEOUT = 30)
)

# Load configuration for current package
load_config(unset = list(API_KEY = "default-key"))
}

}
