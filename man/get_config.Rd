% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_config.R
\name{get_config}
\alias{get_config}
\title{Get Environment Variable Configuration}
\usage{
get_config(
  package = get_package_name(),
  origin = "priority",
  section = "default",
  yaml_file = NULL,
  case_format = "snake_case",
  inherit = NULL,
  verbose = FALSE,
  validate = TRUE
)
}
\arguments{
\item{package}{Character string with the package name. Defaults to \code{get_package_name()} to detect the calling package.}

\item{origin}{Character string specifying where to read the configuration from:
\itemize{
\item "template": Read from the package's template YAML file (read-only blueprint)
\item "local": Read from the user's local configuration file (default)
\item "renviron": Read from .Renviron file
\item "priority": Read with priority order (.Renviron > local config)
}}

\item{section}{Character string for the section in the YAML file (default: "default").}

\item{yaml_file}{Character string with the name or path to the YAML file. If NULL,
the function will search for the appropriate file based on the origin.}

\item{case_format}{Character string indicating the case format to use for
searching the YAML file if \code{yaml_file} is NULL. Options are:
"snake_case" (default), "camelCase", "PascalCase", "kebab-case".}

\item{inherit}{Character string specifying a section to inherit values from, or
0 to explicitly disable inheritance. If NULL (default), the function checks
for an "inheritances" section in the template that defines automatic inheritance
relationships. When explicitly specified, this parameter overrides any
template-defined inheritance. Use 0 to disable inheritance even if defined
in template. Values from the inherit section are used as defaults, which can
be overridden by the main section. Inheritance is recursive - if A inherits
from B and B inherits from C, A will receive values from both B and C.
Only works with "template" and "local" origins.}

\item{verbose}{Logical. If TRUE, displays informative messages about the operation. Defaults to FALSE.}

\item{validate}{Logical. If TRUE (default), validates the template structure
and checks for issues like circular inheritance. Set to FALSE to skip
validation for performance or to work with templates that have known issues.}
}
\value{
Named list of environment variable configurations.
}
\description{
Reads environment variable configuration from different origins (template, local, or .Renviron).
This function is typically used within an R package to retrieve environment variable
configurations based on the specified origin.
}
\examples{
\dontrun{
# Get configuration from template
template_config <- get_config(package = "mypackage", origin = "template")

# Get configuration from local file
local_config <- get_config(package = "mypackage", origin = "local")

# Get configuration with priority resolution
config <- get_config(package = "mypackage", origin = "priority")

# Get production config with defaults inherited from default section
prod_config <- get_config(package = "mypackage", section = "production", 
                         inherit = "default", origin = "template")
}

}
