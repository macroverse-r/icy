% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_config_file.R
\name{validate_config_file}
\alias{validate_config_file}
\title{Validate Configuration File}
\usage{
validate_config_file(
  fn_tmpl = NULL,
  fn_local = NULL,
  type = c("template", "local"),
  package = NULL,
  verbose = FALSE
)
}
\arguments{
\item{fn_tmpl}{Path to template configuration file. If NULL, will attempt to
find using package name. Used for validation when type="template" or as
reference when type="local".}

\item{fn_local}{Path to local configuration file. If NULL, will attempt to
find using package name. Used for validation when type="local".}

\item{type}{Type of configuration file to validate: "template" or "local"}

\item{package}{Package name for context. If NULL, attempts to detect.}

\item{verbose}{Logical. If TRUE, shows detailed validation messages}
}
\value{
List with validation results containing:
\describe{
\item{valid}{Logical indicating if validation passed}
\item{errors}{Character vector of error messages}
\item{warnings}{Character vector of warning messages}
\item{info}{Character vector of informational messages (templates only)}
\item{structure}{Template structure information (templates only)}
\item{inheritance}{Inheritance validation results (templates only)}
\item{consistency}{Variable consistency results (templates only)}
}
}
\description{
Validates a configuration file (template or local) according to its type.
Both template and local files must have an inheritances section, but
different validation rules apply to each type.
}
\details{
Template validation checks:
\itemize{
\item Must have inheritances section (can be empty)
\item Validates structure including section and variable naming
\item Validates inheritance relationships and circular dependencies
\item Checks consistency between data and metadata sections
\item Validates types match declared values
\item Checks for orphaned metadata
}

Local validation checks:
\itemize{
\item Must have inheritances section (can be empty)
\item Validates values against template's types
\item Checks variable names exist in template
\item Validates values are within template's options if defined
\item Validates inheritance relationships
}
}
\examples{
\dontrun{
# Validate a template file  
result <- validate_config_file(type = "template")

# Validate a local config file
result <- validate_config_file(type = "local")

# Validate specific files
result <- validate_config_file(fn_tmpl = "inst/mypackage_config_template.yml",
                               type = "template")

# Validate local with specific template for comparison
result <- validate_config_file(fn_local = "~/.config/R/mypackage/config.yml",
                               fn_tmpl = "inst/mypackage_config_template.yml", 
                               type = "local")
}

}
