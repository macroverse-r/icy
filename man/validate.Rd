% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate.R
\name{validate}
\alias{validate}
\title{Validate Configuration}
\usage{
validate(
  package = get_package_name(),
  var_names = NULL,
  values = NULL,
  section = "default",
  warn = TRUE,
  allowed_vars = NULL
)
}
\arguments{
\item{package}{Character string with the package name. Defaults to \code{get_package_name()} to detect the calling package.}

\item{var_names}{Character vector of variable names to validate. If NULL,
validates all variables defined in the template.}

\item{values}{Optional named list of values to validate. If provided,
validates both names and values.}

\item{section}{Character string for the section in the YAML file (default: "default").}

\item{warn}{Logical; if TRUE (default), issues warnings for validation failures.
If FALSE, raises an error on first validation failure.}

\item{allowed_vars}{Optional character vector of allowed variable names. If NULL,
retrieves from the package's template configuration.}
}
\value{
Logical; TRUE if all validation passes, FALSE if any validation fails
(when warn=TRUE), or an error (when warn=FALSE).
}
\description{
Validates environment variable names and optionally their values against
the package's configuration. This function provides comprehensive validation
including name checking, type validation, and custom validation rules.
}
\examples{
\dontrun{
# Validate variable names only
valid <- validate("mypackage", var_names = c("API_KEY", "DB_HOST"))

# Validate both names and values
valid <- validate(
  "mypackage",
  values = list(API_KEY = "secret", DB_HOST = "localhost")
)

# Strict validation (error on failure)
validate(
  "mypackage",
  var_names = c("API_KEY", "INVALID_VAR"),
  warn = FALSE
)
}

}
