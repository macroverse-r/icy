% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pattern.R
\name{.pattern}
\alias{.pattern}
\title{Generate YAML File Search Patterns Based on Case Format}
\usage{
.pattern(
  package = get_package_name(),
  case_format = "snake_case",
  file = "local",
  yml = FALSE
)
}
\arguments{
\item{package}{Character string with the package name used as filename prefix. Defaults to \code{get_package_name()} to detect the calling package.}

\item{case_format}{Character string specifying the case format. Options are:
"snake_case" (default), "camelCase", "PascalCase", "kebab-case".}

\item{file}{Character string specifying the file type suffix (e.g., "local", "template").
Defaults to "local".}

\item{yml}{Logical. If TRUE, uses exact ".yml" extension. If FALSE (default),
uses regex pattern "\\.ya?ml$" to match both .yml and .yaml extensions.}
}
\value{
Character string containing the generated filename pattern.
}
\description{
Creates filename patterns for YAML configuration files based on package name,
case format, and file type. This function standardizes filename generation
across different naming conventions to support flexible file discovery.
}
\details{
The function supports four case formats:
\itemize{
\item \code{snake_case}: "package_config_local.yml" (default)
\item \code{camelCase}: "packageConfigLocal.yml"
\item \code{PascalCase}: "PackageConfigLocal.yml"
\item \code{kebab-case}: "package-config-local.yml"
}

Pattern structure: \verb{\{package\}\{prefix\}config\{separator\}\{file\}\{extension\}}
where prefix, separator, and transform rules depend on the case format.
}
\keyword{internal}
