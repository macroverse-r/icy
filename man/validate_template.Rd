% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_template.R
\name{validate_template}
\alias{validate_template}
\title{Validate Template Configuration File}
\usage{
validate_template(
  package = get_package_name(verbose = FALSE),
  yaml_file = NULL,
  case_format = "snake_case",
  verbose = TRUE,
  quick = FALSE
)
}
\arguments{
\item{package}{Character string with the package name. Defaults to \code{get_package_name()}.}

\item{yaml_file}{Character string with the name or path to the YAML file. If NULL,
the function will search for the appropriate file.}

\item{case_format}{Character string indicating the case format to use for
searching the YAML file. Options are: "snake_case" (default), "camelCase",
"PascalCase", "kebab-case".}

\item{verbose}{Logical. If TRUE (default), displays validation progress and results.}

\item{quick}{Logical. If FALSE (default), performs complete validation. If TRUE,
only performs critical checks for performance.}
}
\value{
An object of class "icy_validation_result" containing:
\itemize{
\item \code{valid}: Overall validation status (TRUE/FALSE)
\item \code{errors}: Character vector of error messages
\item \code{warnings}: Character vector of warning messages
\item \code{info}: Character vector of informational messages
\item \code{inheritance}: Detailed inheritance validation results
\item \code{structure}: Template structure information
\item \code{consistency}: Variable consistency check results
}
}
\description{
Performs comprehensive validation of template YAML files including structure,
inheritance chains, variable consistency, and metadata integrity.
}
\examples{
\dontrun{
# Validate current package template
result <- validate_template()

# Validate specific package
result <- validate_template("mypackage")

# Quick validation (only critical checks)
result <- validate_template(quick = TRUE)
}

}
