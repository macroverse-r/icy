% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_renviron.R
\name{write_renviron}
\alias{write_renviron}
\title{Write Environment Variables to .Renviron File}
\usage{
write_renviron(
  var_list,
  package = NULL,
  user = "default",
  renviron_path = get_renviron_path(),
  overwrite = TRUE,
  validate = TRUE,
  allowed_vars = NULL,
  verbose = FALSE
)
}
\arguments{
\item{var_list}{Named list of environment variables to write. Names should be the
environment variable names and values should be the values to set.}

\item{package}{Character string with the package name. If provided, enables validation
and grouping related variables together in the .Renviron file. If NULL (default),
performs a simple write without validation or grouping.}

\item{user}{Character string. The user configuration to use. Defaults to "default".}

\item{renviron_path}{Path to the .Renviron file. Defaults to the user's home directory.}

\item{overwrite}{Logical; if TRUE (default), overwrites existing variables.
If FALSE, existing variables are left unchanged.}

\item{validate}{Logical; if TRUE (default), validates variable names against the package's
YAML configuration. Only applies when a package name is provided.}

\item{allowed_vars}{Optional character vector of allowed variable names for validation.
If NULL (default), the function will use the names from the package's YAML configuration.
Only applies when a package name is provided and validate=TRUE.}

\item{verbose}{Logical. If TRUE, displays informative messages about the operation. Defaults to FALSE.}
}
\value{
Invisibly returns NULL on success.
}
\description{
This function writes or updates environment variables in the user's .Renviron file.
It can be used in two different ways:
}
\details{
\enumerate{
\item With a package name (for package developers) - Groups related variables, validates names
\item Without a package name (for general use) - Simple writing of variables
}

Key features:
\itemize{
\item Updates existing variables in-place, preserving their position in the .Renviron file
\item When a package name is provided, groups related variables together in the file
\item When a package name is provided, validates variable names against the package's YAML configuration
\item Provides informative messages about the changes made
}

Note: This function only modifies the .Renviron file, not the current R session.
Use \code{sync_env_vars()} after calling this function to update the current session.
}
\examples{
\dontrun{
# For package developers: Writing package variables to .Renviron
write_renviron(
  var_list = list(
    MY_PACKAGE_DATA_DIR = "/path/to/data",
    MY_PACKAGE_API_KEY = "secret-key"
  ),
  package = "mypackage"
)

# For general use: Setting environment variables without a package
write_renviron(
  var_list = list(
    R_MAX_VSIZE = "4GB",
    API_KEY = "my-api-key"
  )
)

# Using this function in a configuration utility for your package
configure_my_package <- function() {
  # Get user input for configuration variables
  data_dir <- readline("Enter data directory path: ")
  api_key <- readline("Enter API key: ")
  
  # Write to .Renviron
  write_renviron(
    var_list = list(
      MY_PACKAGE_DATA_DIR = data_dir,
      MY_PACKAGE_API_KEY = api_key
    ),
    package = "mypackage"
  )
  
  # Update current session
  sync(c("MY_PACKAGE_DATA_DIR", "MY_PACKAGE_API_KEY"))
  
  # Confirm to user
  cat("Configuration complete. Settings will be loaded in future R sessions.\n")
}
}
  
}
