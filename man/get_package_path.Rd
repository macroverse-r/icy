% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_package_dir.R
\name{get_package_path}
\alias{get_package_path}
\title{Get the Root Directory of a Package}
\usage{
get_package_path(
  package = get_package_name(),
  user_dir = TRUE,
  pkg_first = TRUE,
  ud_which = "config"
)
}
\arguments{
\item{package}{Character string with the package name to locate.}
}
\value{
Character string with the absolute path to the package's root directory.
}
\description{
Intelligently determines the root directory of a package, handling both development
(git clone) and installed package scenarios. This is particularly useful for functions
that need to reference files relative to the package root regardless of how the package
is being used.
}
\details{
The function uses a multi-step strategy:
\enumerate{
\item Checks if the current working directory appears to be the package directory
\item Uses \code{tools::R_user_dir()} or \code{system.file()} to locate an installed package
\item Falls back to the current directory if all else fails
}

This function is especially helpful for accessing package resources in a way that works
consistently for both package developers and end users.
}
\examples{
\dontrun{
# Get the package directory
pkg_dir <- get_package_path("mypackage")

# Use it to locate resources in the package
config_path <- file.path(pkg_dir, "inst", "config", "default.yml")
data_dir <- file.path(pkg_dir, "data")

# Use in a function that needs to find files in the package directory
get_package_resources <- function(pkg_name) {
  base_dir <- get_package_path(pkg_name)
  templates_dir <- file.path(base_dir, "inst", "templates")
  available_templates <- list.files(templates_dir, pattern = "\\\\.Rmd$")
  return(available_templates)
}
}

}
