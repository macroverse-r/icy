% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/update_template.R
\name{update_template}
\alias{update_template}
\title{Update Package Configuration Template}
\usage{
update_template(
  action = NULL,
  var_name = NULL,
  package = get_package_name(verbose = FALSE),
  default_value = NULL,
  description = NULL,
  type = NULL,
  note = NULL,
  options = NULL,
  sections = "default",
  fn_tmpl = NULL,
  backup = TRUE,
  case_format = "snake_case",
  verbose = TRUE,
  interactive = FALSE,
  template_data = NULL
)
}
\arguments{
\item{action}{Character string specifying the operation: "add", "update", or "remove".}

\item{var_name}{Character string with the variable name to modify. For batch operations,
use a character vector of variable names.}

\item{package}{Character string with the package name. Defaults to \code{get_package_name()}
to detect the calling package.}

\item{default_value}{Default value for the variable (required for "add" and "update").
Can be a single value or list of values matching var_name length.}

\item{description}{Character string describing the variable for users (optional).
Required for "add" action. Can be character vector for batch operations.}

\item{type}{Character string specifying variable type: "character", "logical",
"integer", "numeric", or "path". If NULL, auto-detected from default_value.}

\item{note}{Character string with additional notes for the variable (optional).}

\item{options}{Character vector of valid options for choice variables (optional).}

\item{sections}{Character vector specifying which sections to modify.
Use "all" to modify all sections, "default" for default section only,
or specific section names. Default: c("default").}

\item{fn_tmpl}{Character string with path to the template file. If NULL (default),
searches for the standard template file for the package.}

\item{backup}{Logical. If TRUE (default), creates a backup file before modifications.}

\item{case_format}{Character string for template file search if fn_tmpl is NULL.
Options: "snake_case" (default), "camelCase", "PascalCase", "kebab-case".}

\item{verbose}{Logical. If TRUE (default), displays progress and confirmation messages.}

\item{interactive}{Logical. If TRUE, runs in interactive mode. If FALSE (default),
uses provided parameters without user prompts.}

\item{template_data}{Optional pre-loaded template data. If provided, uses this instead
of reading from file. Primarily for internal use.}
}
\value{
Logical indicating success (invisible). TRUE if operation completed successfully.
}
\description{
This function allows package developers to modify existing configuration templates by:
\itemize{
\item Adding new variables with complete metadata (description, type, options)
\item Updating existing variable properties and values
\item Removing variables from all template sections and metadata
\item Batch operations for multiple variables
\item Automatic backup creation before modifications
}

All changes maintain template structure and validate against icy conventions.
}
\details{
Programmatically add, update, or remove variables from existing YAML configuration
template files. This function provides precise control over template modifications
while preserving structure and consistency.
}
\examples{
\dontrun{
# Add a new variable
update_template(
  action = "add",
  var_name = "MYPACKAGE_DEBUG",
  default_value = FALSE,
  description = "Enable debug mode with detailed logging",
  type = "logical"
)

# Update existing variable
update_template(
  action = "update", 
  var_name = "MYPACKAGE_TIMEOUT",
  default_value = 60,
  description = "Request timeout in seconds (updated default)"
)

# Remove a variable completely
update_template(
  action = "remove",
  var_name = "MYPACKAGE_OLD_VAR"
)

# Add variable with options
update_template(
  action = "add",
  var_name = "MYPACKAGE_LOG_LEVEL", 
  default_value = "INFO",
  description = "Logging level for package operations",
  options = c("DEBUG", "INFO", "WARNING", "ERROR")
)

# Batch operation - add multiple variables
update_template(
  action = "add",
  var_name = c("MYPACKAGE_VAR1", "MYPACKAGE_VAR2"),
  default_value = list("value1", TRUE),
  description = c("First variable", "Second variable")
)
}

}
