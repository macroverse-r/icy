% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_local.R
\name{write_local}
\alias{write_local}
\title{Write Environment Variables to Local Configuration}
\usage{
write_local(
  var_list,
  package = get_package_name(),
  section = "default",
  fn_local = NULL,
  create_if_missing = TRUE,
  case_format = "snake_case",
  fn_tmpl = NULL,
  verbose = FALSE,
  sync = "conservative"
)
}
\arguments{
\item{var_list}{Named list of environment variables to write. Names should be the
environment variable names and values should be the values to set.}

\item{package}{Character string with the package name. Defaults to \code{get_package_name()}
to detect the calling package.}

\item{section}{Character string for the section in the YAML file (default: "default").}

\item{fn_local}{Character string with custom filename for the local config.
If NULL, uses the default naming pattern.}

\item{create_if_missing}{Logical; if TRUE (default), creates the local config file
from template if it doesn't exist. If FALSE, returns an error if file is missing.}

\item{case_format}{Character string indicating the case format to use for filenames.
Options are: "snake_case" (default), "camelCase", "PascalCase", "kebab-case".}

\item{fn_tmpl}{Character string with the name or path to a custom YAML template file
for validation. If NULL (default), uses the standard template file for the package.}

\item{verbose}{Logical. If TRUE, displays informative messages about the operation.
Defaults to FALSE.}

\item{sync}{Character or logical. Controls session environment synchronization:
\itemize{
\item "conservative" (default): only sync variables already in session
\item "all" or TRUE: sync all written variables to session
\item "none" or FALSE: skip synchronization
\item character vector: explicit list of variables to sync
}}
}
\value{
Invisibly returns NULL on success.
}
\description{
Writes or updates environment variables in the local configuration YAML file.
This is a streamlined implementation that delegates the actual YAML writing
to the generalized write_config_yaml function. Only variables defined in the
template are kept; any other variables in the local config are removed to
ensure consistency with the template.
}
\details{
This function enforces template consistency by:
\itemize{
\item Validating all variables against the template
\item Removing any variables not defined in the template
\item Ordering variables to match the template order
\item Preserving NULL values as defined in the template
}

Variables not in the template will be silently removed from the local
configuration to prevent undefined variables from accumulating. This ensures
local configs remain clean subsets of the template definition.
}
\examples{
\dontrun{
# Write variables to local config
write_local(
  var_list = list(
    API_KEY = "my-secret-key",
    DB_HOST = "localhost",
    DEBUG_MODE = "TRUE"
  ),
  package = "mypackage"
)

# Write to a specific section
write_local(
  var_list = list(API_URL = "https://prod.api.com"),
  package = "mypackage",
  section = "production"
)
}

}
